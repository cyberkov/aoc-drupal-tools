<?php
// $Id$

/**
 * Display help and module information
 * @param section which section of the site we're displaying help
 * @return help text for section
 */
function aoc_tools_help($section='') {

  $output = '';

  switch ($section) {
    case "admin/help#aoc_tools":
      $output = '<p>'.  t("Assigns Users a specific role on Corpmembership.") .'</p>';
    break;
  }

  return $output;
} // function aoc_tools_help


/**
 * Valid permissions for this module
 * @return array An array of valid permissions for the aoc_tools module
 */

function aoc_tools_perm() {
  return array('administer AoC Tools');
} // function aoc_tools_perm()


/**
 * Displays the administration page
 */

function aoc_tools_admin() {

// Actions - Submodule actions which can activated

  $form['actions'] = array(
  '#type' => 'fieldset',
  '#title' => t('Actions'),
  '#collapsed' => TRUE,
  );


// Professionsync
if(module_exists('aoc_professionsync')) {
  $form['actions']['aoc_tools_profession_cron'] = array(
  '#type' => 'checkbox',
  '#title' => 'Update professions in Bebot',
  '#default_value' => variable_get('aoc_tools_profession_cron', 0),
  '#description' => t("Update the professions on cronruns? Activate this if you want professions be synced back to Bebot.")
  );
}

// Authorization
if(module_exists('aoc_authorization')) {
  $form['actions']['aoc_authorization_cron'] = array(
  '#type' => 'checkbox',
  '#title' => 'AoC authorization active',
  '#default_value' => variable_get('aoc_authorization_cron', 0),
  '#description' => t("Update the memberships? Activate this after you've set up everything correctly. <br /> As long this is not checked, nothing will be altered.")
  );
}
//// End Actions

// General setings tab

  $form['general'] = array(
   '#type' => 'fieldset',
  '#title' => t('General'),
  '#collapsed' => TRUE,
  );
 
  $form['general']['aoc_tools_bebot_database'] = array(
  '#type' => 'textfield',
  '#title' => t('Bebot database name'),
  '#default_value' => variable_get('aoc_tools_bebot_dbname', 'bebot'),
  '#size' => 20,
  '#maxlength' => 20,
  '#description' => t("The database where bebot resides. Drupal's MySQL User <b>must</b> have access to it.")
  );
//// End General


// AoC Authorization
if(module_exists('aoc_authorization')) {

  $form['authorization'] = array(
   '#type' => 'fieldset',
  '#title' => t('AoC Authorization'),
  '#collapsed' => TRUE,
  );

  $form['authorization']['aoc_authorization_role'] = array(
  '#type' => 'select',
  '#title' => t('Users Role'),
  '#default_value' => variable_get('aoc_authorization_role', 0),
  '#options' => user_roles(TRUE),
  '#description' => t("The role that should be assigned if the member is in the guild.")
  );
}

// Profile
  $form['profile'] = array(
  '#type' => 'fieldset',
  '#title' => t('Profile fields'),
  '#collapsed' => TRUE,
  );
 
  $form['profile']['aoc_tools_ingamename'] = array(
  '#type' => 'select',
  '#title' => t('InGame Name Field'),
  '#default_value' => variable_get('aoc_tools_ingamename', 0),
  '#options' => aoc_tools_list_profile_fields(),
  '#description' => t('Select the field where the inGame Names are stored.')
  );

// this only makes sense if professionsync is active
  if(module_exists('aoc_professionsync')) {
    $form['profile']['aoc_tools_profession1'] = array(
    '#type' => 'select',
    '#title' => t('Profession Field 1'),
    '#default_value' => variable_get('aoc_tools_profession1', 0),
    '#options' => aoc_tools_list_profile_fields(),
    '#description' => t('Select the first profession field')
    );

    $form['profile']['aoc_tools_profession2'] = array(
    '#type' => 'select',
    '#title' => t('Profession Field 2'),
    '#default_value' => variable_get('aoc_tools_profession2', 0),
    '#options' => aoc_tools_list_profile_fields(),
    '#description' => t('Select the second profession field')
    );
  }
  return system_settings_form($form);
} // function aoc_tools_admin end

/*
 * Menu Hook
 */
function aoc_tools_menu() {

  $items = array();

  $items[] = array(
    'path' => 'admin/settings/aoc_tools',
    'title' => t('AoC Tools'),
    'description' => t('Configure AoC Tools'),
    'callback' => 'drupal_get_form',
    'callback arguments' => 'aoc_tools_admin',
    'access' => user_access('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    );
  return $items;
} // function aoc_tools_menu end


/**
 * Aquires available Profile fields of the profile module
 * @return Array of available profile fields
 */
function aoc_tools_list_profile_fields() {
  $result = db_query('SELECT fid, title FROM {profile_fields};');
  while ($field = db_fetch_object($result)) {
    $data[$field->fid] = $field->title;
  }
  return $data;
}

/* ////////////////////// Installation, uninstall and Updates.... ////////////// */

/*
 * Install
 */

function aoc_tools_install() {

// Setup the translation table
  db_query('CREATE TABLE IF NOT EXISTS {aoc_tools_translation} (
    `en` varchar(255) NOT NULL,
    `de` varchar(255) NOT NULL
  ) ENGINE=MyISAM DEFAULT CHARSET=latin1;'
  );
  db_query("INSERT INTO {aoc_tools_translation} (`en`, `de`) VALUES 
    ('Weaponsmith', 'Waffenschmied'),
    ('Armorsmith', 'Rüstungsschmied'),
    ('Alchemist', 'Alchemist'),
    ('Architect', 'Architekt'),
    ('Gemcutter', 'Juwelenschneider');"
  );

} // function aoc_tools_install end

/* function aoc_tools_uninstall() {

}  // function aoc_tools_ end
 */
